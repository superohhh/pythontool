#! /usr/bin/env python
# -*- coding: utf-8 -*-
import json
import os
import shutil
import subprocess
import sys

from PySide6.QtCore import Qt, QByteArray
from PySide6.QtGui import QIcon, QPixmap, QStandardItemModel, QStandardItem, QColor
from PySide6.QtWidgets import QWidget, QLabel, QPushButton, QLineEdit, QFileDialog, \
    QVBoxLayout, QTableView, QMessageBox, QDialog, \
    QCheckBox, QHBoxLayout, QCompleter, QDialogButtonBox, QTableWidget, QTableWidgetItem, \
    QHeaderView, QInputDialog, QAbstractItemView

TUBIAO_windows = ""
TUBIAO_refresh_button = b''
TUBIAO_add_dependency_button = b'000001000400101000000000200047010000460000001818000000002000be0100008d0100002020000000002000350200004b03000030300000000020007c0100008005000089504e470d0a1a0a0000000d49484452000000100000001008060000001ff3ff610000010e49444154789ca592316e83401045dfe05d132590b880020a4b1444ca3d7292e4189172983496a2dc87134049950285854d61eca03526487c698bfd33fb67e6efc034042049927d9ee74f63ce8577456003a0947a2dcbf27dcc2d1500c05aab8d31930f1709005644ec1a817fa1389ae3b6a9460564b82b2ed129c002c6091800adf537d00c77370700499264af947a11916ddff7a7793dadf54f5dd7cf4dd3ecd234fd6adb760bf443dc02c471fca98220b82bcb32efba7337329c0ed819636eabaa7a1cc63c15b09ee77961183eccd8035996bdf9beff31973367a269db36006ef833d1f5a1bf662203d73bf18bbcd57bb04460d5266e4444cf254c6d171cbf90288a0e6118de174571e65cfc02de0d4cd0b2a8543c0000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000018000000180806000000e0773df80000018549444154789ced544b6a1b4114acd7ef8d460b0983041688398603f622e8165a08ed75066143cea14b84c439c0e81e5a2528445ace263019779737237f148d3d6dbc4b0a1e344c55d7fbf43c200e42522335ade05415e3f1f8d36030f846525a0bdb12cd0caa7a5914c5c727ba578d5a1b9004c952447eb7d54419d490584dac4134fe1bb43670781ce0c928cbf22199c562d1c83bba4b040054156606928d99a4698ae170f879bbdd5e264932f6de3772450421045455059b4c26b6d96cae55f522847027227fb58d245435ecf7fb2beffdd96834ba1591a66c084001fc9c4ea737369bcd64b95c5e14457125227fd03c97e0bd3f23e976bbdd071169fa8b49d27abddef76eb79b4244606658ad5609493d15f5379765d9ad99fd229990d43ccfed143fcf73538ddc899d4e0759967d31b35dc4b27bd66f7921b42ccbc319ebf55af1e4a5bc10cdafe608aeaee06b5dc1a1fef7dba66fc5bf6740440cee2d069d10421a23b0b6c47a4ffde8f7fbe700c27b1bb0aa2acce7f36be75cd7397768d3abedba079d54aaf4b10e738b0000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000020000000200806000000737a7af4000001fc49444154789ced97cf8ed25014c6bf73a77fa0e81009dc0d26d5480c9b2e0c0dfa107d83d9b2f619c0956fe043b8702b4f40e24e37c6181316ac089381480c84723f17d0499d8cb40c7188095f72927b7b7beef9dd736f4f5be03fd51949d15a5fd4ebf51ec9020090947f1e390942b2acb5fee4380e8320789580ed3b9fdad7a1dbed26ab14634c71b55a99c964b277e03b03dc104544d9b6cd63011cbce787021cac13c009e0e80056d22029a922b34b8a24f1e7232824250c43154551ae9ad0ebf508e0fadebd3341f241b55afda29462a55279b9af7fa2240386e43936b53c6b050ac01ac023638c4d1261189ef7fbfd87009cedd82e0900148bc5abc562b1e968ad2f00bc26e9dd92dedb640038d3e9f4691cc76eb95cfee1baee4f638c95e10711310094e7791f86c361d70200dbb69f8fc7e3761cc710c9575d8d3149733d9bcd9e29957f1745049ee77d0350b00060341abd0d82e0e3e5e565e68bc5b22c89e398cd66b334180cdecde7f3275aeb8eebba5f49aaed0affaa388e592a95ec76bbfd5d447ee5a6be299256ad56fbac9462a3d17871d77992bc09360730d35aad96bd6d97499e01c072b92c6daf3979e749622700c4e6f4665a1445e93e81eb8395cb3f65260d70349d004e0027804301ccd68e02c0f57a5d24a90a85c2fd6532f56f28beefbff17dff7da7d3799c1ebb57189299df00bbf41b6347d73aab1a3be70000000049454e44ae42608289504e470d0a1a0a0000000d49484452000000300000003008060000005702f9870000014349444154789ced98bd6ac3301446bf14534a566d1e0a361d4b404fd017c8e22d53f6eeee684ff6e2cd2f6267f7e4b14b08dd4aa2c50fd051c693ba28fd990a8d958be01e105c81d1d54178f8eec218039fb9a1bec0a5381588e3b80b82e0bdaeebb5b326c61827ab288a0d802300138661efaa8fb31798a6e916c083adef5cf5e17f801a16a08605a861016a58801a16a08605a861016abc17087e6ecab2dcd82475317ddf3f9d6badf532cff3ed1ce7028094f29024c91b80ef4c1c4551079b613d58c7a66956bf32f1300cf7b019d607945231002cce83adbaaed75555bdcc15c0b5d6cb711c1fedf62484f898e35c009052eebbae7b06e06eac9265d916f6c98510afde8d55ae050b50c302d4b000352c400d0b50c302d4b000352c408df702c1df9ffc0f29e501c0c9d67b577dbe42bd0bdab65d29a5e2344d77ae7a3815b8069fe9b69066c4d62a9f0000000049454e44ae426082'
TUBIAO_remove_button = b'000001000400101000000000200087000000460000001818000000002000bd000000cd0000002020000000002000d20000008a0100003030000000002000d60000005c02000089504e470d0a1a0a0000000d49484452000000100000001008060000001ff3ff610000004e49444154789cedd0a11280300c03d0d055d63064bf989f45b5aeeb30380c3bc4cc9ecf251760f96d03c07317a8ea19113533dbb3e88b4e4485992f76f7ddcc0e006db0bc88481fccbccd3f71016ec98b11ecbb09b95b0000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000018000000180806000000e0773df80000008449444154789cedd2210e03211085e1f7188227c12ca2bd1307e54ef52458420ab3666baad99af299717f329301b66de3d75c4d01c0dc14070043118188405541ae59e4d31a63c0c61873effd39e71c58772a35c68873ee655b6b4729e541f2adaa4bea24a1aa3684d02922482939effd9afaa5d6ca9c7307eefb2000e04fde74dbfedd09ac832b3a082d1aeb0000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000020000000200806000000737a7af40000009949444154789cedd1210e02311085e1791bd29a0645900dba92bbf400353dd49a1ea0be9720415673839a0dc956b02b402056cf92309f19f9bf6488841042fc3b1011bcf783736ee10cd75a91737e713637416b4d314637cf33eb1aadf5308e6385b5f6364dd36579638903200030c63c0ebdf7736bedc415ff1ea1947aa294720c215cf778414ae9ced9dc04221a3e770fbc7f174208f1935609f231641646517a0000000049454e44ae42608289504e470d0a1a0a0000000d49484452000000300000003008060000005702f9870000009d49444154789cedd8b10d0321100551385de40c5304a95b233f4726a710baa10f9612700d96658f90fe93c877d046ebd75a6e67073dc0b7144053004d013405d0144053004d013405d014405300edecbddf4a29cf31c69d1ee6133146bbaeebe5524acb39b7e54b29adc3cc7ef1417f6166ceb7d61e39e73ae7dc6a854208566bcd5e97399802680aa02980a6009a02680aa02980a6009a02680aa0bd01d79e51571dd2d2260000000049454e44ae426082'
TUBIAO_undo_remove_button = b'000001000400101000000000200066010000460000001818000000002000b3010000ac0100002020000000002000670200005f030000303000000000200009020000c605000089504e470d0a1a0a0000000d49484452000000100000001008060000001ff3ff610000012d49444154789c9552cd4ac340189cd9ad013195044ad29f5de8a9cf9097f0187c06f15c14bc684110c43750f0e6cd370af4e003d882c921249f8726c5da689381efb23b33cc7c7cc0dfe03f7f07410088a2e8f8105135083549b1d62e56abd559f5aedb181080225918636e8ba270822078af38659bc89a24acb577c3e1f08164fd7e70175bb131e63e0cc3a74aec0038aae2f77ecd4e25a594c2743a9d4f2693ab4adc1a544a613018dca4697a1904c122cbb2539202401af8a294d28ee37c2449f246527a22021159e7795e2c97cb7559965f35b9c90080f67dff73af82b5f6c2f3bcc7ae156a6892188d46d7aeebbec671acb15960bdc4a6d9438f24c6e3f1dc75dd971f493a45da9af4fbfde7300c4fb039a4ee26c698f96c363baf2b76310036270d11e92cdc316943fa06e9ca4377debd7d1a0000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000018000000180806000000e0773df80000017a49444154789cd595b14ac3401cc6bfbb5c84347a945c49a101d3a99be81bf42932770c143a74ea249d55f401dcba3928882f1037ebe06071e8e20b98ae9982fd3b7891425b699a46f0836f0977bf8fffdd170ed85c2cc7dadce2a5c38988b5db6db1d5e6750a82c00030ef743acd46a311b9ae7b0c00c3e1b0f8441a8e6eb7eb2ba5269ee75d1091c0f75d14bb8f0c1e86615329f5ea79de99103fa7b353f86401ceff1dfc5cc38dc2f0ac156118361dc779abd7eb979c73003001081db2a9971ac6006030181cd66ab549abd53ab52c0ba6696ee595f0d168a47abd5e9424c991ebba3744945591721ccf9c31664a299fa6d3e915638ca0c7679cf394883e0060369bbda769faa9c1f31c0104c01442c442085a9a228ee303c7711ea594d759e719631b3b5bbf4e1c00c6e3b19452bed8b6fda043f6b4450e1b2b13b22611915dad569f6ddbbedbd93ff05b886118e586542a953f0d419921f7fd7edf4219934451b4effbfe6d1004278bdf772506000bef41292afe8a95a52fcdf3801803bbd5920000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000020000000200806000000737a7af40000022e49444154789ced563b8c125114bdf7cd7d4fb3926122a180868466f824509221013a233fa9a8ec69ecd62dec6874d7ce9ac268678326c6d6123a3a4a0b120b36768b10b3109c6be10c4edc251b779921317b925bcde49edf9b0fc02dae07dc2bbb10023a9d8e0c949499110084520a72b9dcb3582cf69999ef7baef90a0400945242a15038544a7dcf6432cf2793c9dd6eb72bc0cf4a1c779a52ca259fa552a9175206d3c0c679b1583c544a9d99a679cccc020084afd17b9d5b96f5542935334df3d8e3dcd7de37cebde4ae73a7777ff057e72ef989e31c2128e71ef2e09d5b9675a4949aa5d3e9974a29803f070e99f9da73a508a7f323223a4b269327ae736776810b7bdc4e9199b152a93c190e87afb2d9ecebe974da592e9720c4ee529fcfe760dbf6050142d334bb542a3d1e0c066fd6eb358542a12f52ca05222a00b02fddf6efe0783cfe693c1e771171b3930000981910f194997f004078b55a7d5d2c16a700a0ed48800d00771289c43729e5a5fb504a09ad56ab26a59c47a3d177cee10344bcf1b87bae82464450abd5ea44b40c87c31f7bbdde01002867e8a6d36eb7b5adec8e42414450afd76b44f4d3308c0f9ec727b09f10222268369b0f89e8dc308c3e334bd8ede3b81dde241a8d4695886cc330dedf264144b6aeebfda03ec75e6c9290529eebbabebf24aad5aa7b26fa44b4b9c577110ec8a9e301112d2391487f341a1dc0ef14fc17e14da25c2e3fcae7f36f99f99e7bd977011e0844044ddbfe520b44c45ed9ff2bfc0231c8edc7950b22730000000049454e44ae42608289504e470d0a1a0a0000000d49484452000000300000003008060000005702f987000001d049444154789cedd9b14ec2501406e043698c8c5da46cc4f8001d8d88a1f0026e8c6d61627730842720e1018c09e5c2ca0b30376e262e90407070e50d1c4c8f8b9a8296b6f4ca3d37e99fdc85de9efc5f8184961c2282cc514417489b0c203a194074b8033a9dce5d3e9f5f0d06835bdeb3ff8aca7358abd5eabaaeeb00006c369b339eb34383885c96e3385d005803c0bad1683cf09a1bb5a42ecf0520b27c6a806ddbbdeff2f57afde8e5530128943f1840a5fc41004ae513032ccbfa296f9ae6a3e8f2890014cbc706502d1f0b40b97c242058be56ab912bbf172043f95040a03c522e8f889043dc7e2a61db768f316601c085a669d0eff7cd42a1f0fe7fbf87f74755d58f66b3f91cba21a8190e8737f075e509ad75a5526161efc0d60d4db95c7e5314c5f77d3ff8f26bf2ebc6378661bc841edc158d46a36b45515600809aa6a1e779bae8cf79e22f7110512c169fe6f3f9a9e8a289003221f61e648c5d5147446e0822745df7a821626da28c88bd912a22d1668a88c4278cc7e32dc462b138910a400d71f0895410a94ea680483d208828954a4747701932994c2e4521b80dda452c974b552ac02ea2dd6edf4b074044984ea746b55a7567b3d9f93100bfee89654bf62fa5e86400d1911ef009e5d2ea3bfb2ad95a0000000049454e44ae426082'
TUBIAO_run_pyfile = b'0000010004001010000000002000b1010000460000001818000000002000bc020000f70100002020000000002000d8030000b30400003030000000002000450400008b08000089504e470d0a1a0a0000000d49484452000000100000001008060000001ff3ff610000017849444154789ca593bd4a03411485efccce2e9b9db990617689a60821cd5a6c0ad3442461439ec0522c22e41df425acb534a0a095a2750ac1bc420a7f204108419b3c81ebd86c64099b4d82a7be7cf7ccdc73a0d7ebd9aeebdee7f3792da5bc0ac3708b1002b10c582521c401e7fcb556abed09216e72b9dc8752ea74381c5af10801009ac5e822e213630c28a5502e9743447c761ce7cdf3bc0e632ce92615d441c481d6da00001300803106aeeb1e3a8ef382888352a9d4360c23092249c031220e4cd38478039d0f68ad9952eac4b6ed09e7fca15aadfa94d22428d5d20f006800300821dfb3d9ecacd56aed32c6a6a3d1a88f88e76118ba0010cd172d3a488afc6da2148220d8e19c3fdab6fd592c16bbf36765015241beefef0b21be0a85423bf33cebea5f4fc8726000802684448d46c343c48bf178dcb72c6b52afd783e9747a194551ea2726cf68ae3a23c0922029a58ee641aa542a99415a16e5f7b5a2bc50a6db8dcb14d7f94e4aa9a594d7cd66737b933aff02495f6adad04d905a0000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000018000000180806000000e0773df80000028349444154789cad56cf4b1b41147e3b336f06766389bbd10d89ee9ac2c6835e765708968207237816bc04d25fdefd072cc442cfedd9865ad2738b2dc4530feda550698ab79e052f3d08622105a1e9eb65b35d7fd49a6cbff3ccfbdebcf7bdf70d00005b5f5fb74ba5d2874c2643b66defcfcfcfdfe29c43040e001a0c0b2104e4f3f96d00f8592814de20e2374424cbb29aababab25c6583aa246a3211863c7131313af0cc3807abdeed8b6fd444a494aa9eed4d454a3d96c9a9a16c7e657c5bb80300c11008e8bc5e20b22d200001863b0b8b8e89ba6f9161149d7f5c372b9bc4644fde76800c0fe1af4328242a1f012110100b09fa59412c2305c320ce3a310820cc3e8f8bebf2ca5ec5f67ff244a10b422827e095894294829a15c2ed7755d3f104290699abbd56a75ee5a42b882207919344d839d9d9dacebba1b4aa91344a45c2eb755abd5dc73421898e0cc65c618d46a353797cb6d454238715d77a3dd6e8f5e2a840108202a030700e09cc3c2c2c29c699abb4208d275fdc0f3bcbb4aa9e4d98109fa889b2ba504dff7970dc3f81c0961af52a92c45fdd18625481269000044c4a6a7a71fe8ba7e88881404c13dcef9d02f388f580847474737b2d9ec17443c20227ebd614981b404fd12f58888799eb7e638ced76eb71bcccece3e1242f444cac47e4929616666663993c93c3e3d3d0d95527b4110dcef743aef7abddec04d3e23d36ab5fa5f657a61d010919452df1dc7799866d06285b4dbedd1e4aab02ceb599a55116b5c29059ee7dd49bbecae5ad79f52afeb62b1b87d99e1440d1cde701296f93a61994fa34df963727272b3d56a59435b66d2f4f3f97c6cfa636363cf5756566ea6367df8f36d793f323242e3e3e3fb954ae5b610f10ca6fab6fc06b0e3cfda214b7d250000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000020000000200806000000737a7af40000039f49444154789cc5574f4c236514ffcd377f5266ccf0b1144868e89fa99632cdaa94624269da4c50488a8413844a253431929806ff6dd08be1c081c46e16ae5c964d563d70c6c81ab3f73511a30777f562b267ec668d878dd13e0f9d294351047706df6df27deffb7ef3bddf7beff700dbaad56a2c9d4e1f72ce29140a3d29140a6f1091662f0b0044f86507070757babababe0640922411000240c160f02bcbb28aa2d8ba9bd960bcb5743afd3600e29cdf5b5d5d2d2693c9f73a3b3b7f0040a228522412b93d3535955614c50d8479064096e52d008df1f1f10f05a1f983d56a359648243e5214e511000a040275c3306e6c6e6e1ace8bcccdcd7913164110b601d0f0f0f01a1131000a00489284e5e5e5abe170785796e5df0190a6690f53a9d4dacece4ed0758488a7098d03606464644d92240060ebebebad670e040228168b565f5fdfe78cb13f0190aeebdf8d8e8e2edb800100b68f3700da0e15008088d8d8d8d8eb9cf3bb008831d6e8ededbd333939f98aaaaa8e0bbb3090b300385be07ae6bdbdbd2ba669beab69dacf6866ce1f030303b7171717d3b63f0048386f58ce01a0650ef14451c4f6f676381e8f7fdcd1d17104801445796c18466d696929ee72f9f7d4bd0800c7c5d9a3280aa6a7a75f8846a3bba228129afcb86f9ae6fb4747473a63cda3ce0ccb7f00700a882449b02c6b32180cde0140822010e7fc309fcfbf46444afb7eaf0038d6e2071105b2d96c99737e280802098240dddddd5f4c4c4cbcdc56513d0500e0f8991963a8d7eb9d838383d7745dff1176458d46a3bb333333cfdb771cf3c22b00ce716eff52a9f49c6118376459fe1500a9aa5acfe5726fb9b2c573006e2012d0e4c7fcfcfc682814fa0ccd6cf9ad52a914fc0600a0151606009aa621994cde443353ae7b7ad145add1681c7f5c46084aa5d24b97158253248cc5625b2e12fee21b09dbd3309148ace9bafe138ed3f0e6ececec553fd2f04421cae57265cef9b7975188feb7527ca219158bc5172391c82d57337a30343474cd9766e46ec7b55a2d621846cd69c7b22c3f360ce37ab95c7ed6e5e2493b3e2148f6f7f7bb52a9d43b6d82e4938585858ce782a45d9265b3d9b2aeeb87b025594f4fcf97be48b27388d2ef33994c85885ad47e6a517a862cbfe5c87255551f9aa6f981a7b2fcef06934aa562b40d268f62b1d8d6c6c646dcf3c1e41f46b3fbb02b58381cfed4b2ac11df46337b38bd87d3c3e9dd42a1f0aa8bd9fe0ca700b0b2b212cd6432df70cea9bfbfff493e9f7f93889eb1977d1bcfff02a851677c2155692c0000000049454e44ae42608289504e470d0a1a0a0000000d49484452000000300000003008060000005702f9870000040c49444154789cd59aff4b22691cc79fc6b1e41acdec82256c9245ee97c80a6513b98efda52014d225e5a88ba0ae2f6e2a2a3b06c77174912e383fd872c8fd6254c6298bed0ff7435c61ab1706574488e536a4f7bf3cfbc3f62c398e12b4ed3c0ebc611e9d19df2f9f799e793e9fcf000821b8abe3e3e3aef1f171a856ab214551d06432c1edededeff9c7e1a28ac6fafafa8f4d4d4d650000e4a9acd3e9de1d1c1c68c5365c132093c9d035cc57808c8d8dfd512814be11db7815c0e8e8681419254992f3783c9e4020b0d0d9d9f91f00a0028c20889bf9f9f980d8e62b00542ad51932c830ccc2dd835656567e96c964573c90324551f9b5b5b5492c00ee9adbdada121cb4535353bff37b03005056abd5d95ae78802506fd6393d3dfd767878784b0864707030757474a4c11a00696f6f6f40abd5fe230462b15822c56251863500d2c6c686a5a3a3e38c0f2291486e9c4ea71f7b0024bfdfffb2b9b9f9037fa02b148a8b5028e4c01e00c9e17004856e2b9aa6dfc7e37113f6001042707272f2c46834ee0a81180c8664369b55630d80944c260d1a8d262d0462b55a598ee348ac01905896b52a95ca733e0849929cdbedf6600f80e476bb3d244972fcde502a95e7e170f805f6001042c0711c69b3d958a1db4aa3d1a41389c433ac0190b2d9acda6030248540868686fecae5724fb00640dadddd35f6f4f4bc1702999898785d2a9508ac019042a19043a1505cf041a45229e7f57a5dd80320399d4ebf4422b9e1f7467b7bfb79341a1dc51e0042088ac5a2cc62b144846eab9999995fb107404aa7d39a818181147f7d7537f6c01a0029168b3d6f6969f980fce9f5fab7e83b0234c0363737f72fc3302c6a5f5e5eead07e4300d4db1a0220168b3d67599641edbebebe4bb44f8a63e97e5b3a9d7eca300c5b2814740000ededc7ff2f2f2f473f1f84e3202e168b32b3d9fc06084ca3d3d3d3bf613d8d2e2d2dbd127a90a954aa33ac1f64c160d02197cbf3fc7f5d2a95723e9fef65adf3440788c7e3269aa605177376bb1ddfc55cc32ea7398e23ad566b6306342e97cb2b1452b6b5b55d601d5286c3e117b5827a97cbe57dc8b51f152091483cab9756b9bebe6e7ee86f3c0a402e97ab99d8d2ebf56f33990cfda57af78b02944a25c26eb7bf1632dedddd9dddd9d9c137b5e8f3f95072b7c2b85c2ecf0783417c93bb9148c4725b9eaa4aaf2f2e2ebe7a2ce30f0648a552350b1c66b3f9cdd5d5159e058e7a25a6fefefe778787874fbf86f1ba00b50a769393938245beaeaeaee3cdcdcd1fbea6f12a807a65d64020b0701b545764075a5b5b0bababab3f8961bc0a805fe876bbdd750bddb3b3b3bf8869bc0ae0beaf1a8c8c8cfc99cfe729b18d570140f8e9650f8220f8d1100400947b7b7bffdedfdfff4e6cc3750120fc54dfb2d96c90a669485114341a8d50ac017a1f7d04017533a878291e560000000049454e44ae426082'


class DebugPage(QWidget):
    # 调试窗口页面
    def __init__(self, main_window_instance):
        super().__init__()
        self.main_window = main_window_instance
        self.deleted_dependencies = []
        self.current_directory = ""
        self.backup_folder = os.path.join(os.path.dirname(os.path.abspath(__file__)), "依赖库文件备份")
        self.config_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), "deleted_files.json")

        # 创建调试页面的UI
        self.init_ui()
        self.setWindowTitle("环境调试窗口 - by bilibili爱吃肉的呆头猪")

        # 设置窗口图标
        icon_data = bytes.fromhex(TUBIAO_windows)
        pixmap_windows = QPixmap()
        pixmap_windows.loadFromData(icon_data)
        self.setWindowIcon(QIcon(pixmap_windows))

    def init_ui(self):
        # 添加垂直布局
        layout = QVBoxLayout()

        # 添加虚拟环境文件夹编辑框
        self.virtualenv_folder_edit = QLineEdit(self)
        self.virtualenv_folder_edit.setPlaceholderText("请选择虚拟环境目录路径")
        layout.addWidget(self.virtualenv_folder_edit)

        # 添加选择文件夹按钮
        self.select_folder_button = QPushButton("选择虚拟环境文件夹", self)
        self.select_folder_button.clicked.connect(self.select_virtualenv_folder)
        layout.addWidget(self.select_folder_button)

        # 添加镜像源标签
        self.mirror_label = QLabel("镜像源:", self)
        layout.addWidget(self.mirror_label)

        # 添加镜像源编辑框，并设置默认内容
        self.mirror_edit = QLineEdit(self)
        self.mirror_edit.setText("https://pypi.tuna.tsinghua.edu.cn/simple")
        layout.addWidget(self.mirror_edit)

        # 添加是否使用镜像源复选框，并设置默认勾选状态
        self.use_mirror_checkbox = QCheckBox("使用镜像源", self)
        self.use_mirror_checkbox.setChecked(True)
        layout.addWidget(self.use_mirror_checkbox)

        # 添加列表显示框
        self.dependencies_list = QTableView(self)
        self.dependencies_list.setSelectionBehavior(QAbstractItemView.SelectionBehavior.SelectRows)
        layout.addWidget(self.dependencies_list)

        # 创建水平布局
        button_layout = QHBoxLayout()

        # 添加刷新依赖库按钮
        pixmap_refresh_button = QPixmap()
        pixmap_refresh_button.loadFromData(QByteArray.fromHex(TUBIAO_refresh_button))
        self.refresh_button = QPushButton("刷新", self)
        self.refresh_button.setIcon(QIcon(pixmap_refresh_button))
        self.refresh_button.clicked.connect(self.refresh_dependencies_list)
        button_layout.addWidget(self.refresh_button)

        # 添加依赖库按钮
        pixmap_add_dependency_button = QPixmap()
        pixmap_add_dependency_button.loadFromData(QByteArray.fromHex(TUBIAO_add_dependency_button))
        self.add_dependency_button = QPushButton("添加", self)
        self.add_dependency_button.setIcon(QIcon(pixmap_add_dependency_button))
        self.add_dependency_button.clicked.connect(self.add_dependency)
        button_layout.addWidget(self.add_dependency_button)

        # 添加删除按钮
        pixmap_remove_button = QPixmap()
        pixmap_remove_button.loadFromData(QByteArray.fromHex(TUBIAO_remove_button))
        self.remove_button = QPushButton("删除", self)
        self.remove_button.setIcon(QIcon(pixmap_remove_button))
        self.remove_button.clicked.connect(self.remove_dependency)
        button_layout.addWidget(self.remove_button)

        # 添加撤销删除按钮
        pixmap_undo_remove_button = QPixmap()
        pixmap_undo_remove_button.loadFromData(QByteArray.fromHex(TUBIAO_undo_remove_button))
        self.undo_remove_button = QPushButton("返回", self)
        self.undo_remove_button.setIcon(QIcon(pixmap_undo_remove_button))
        self.undo_remove_button.clicked.connect(self.undo_remove_dependency)
        button_layout.addWidget(self.undo_remove_button)

        # 添加运行文件按钮
        pixmap_runpyfile = QPixmap()
        pixmap_runpyfile.loadFromData(QByteArray.fromHex(TUBIAO_run_pyfile))
        self.run_file_button = QPushButton("运行", self)
        self.run_file_button.setIcon(QIcon(pixmap_runpyfile))
        self.run_file_button.clicked.connect(self.run_python_file)
        button_layout.addWidget(self.run_file_button)

        # 将水平布局添加到垂直布局
        layout.addLayout(button_layout)

        # 添加安装本地whl文件按钮
        self.install_whl_button = QPushButton("安装本地whl文件", self)
        self.install_whl_button.clicked.connect(self.install_whl_files)
        layout.addWidget(self.install_whl_button)

        self.show_files_button = QPushButton("高级功能（模块文件删减）", self)
        self.show_files_button.clicked.connect(self.show_dependency_files)
        layout.addWidget(self.show_files_button)

        # 设置布局
        self.setLayout(layout)

    def install_whl_files(self):
        # 安装whl文件按钮事件
        try:
            # 打开文件选择对话框，允许选择多个文件
            file_dialog = QFileDialog(self)
            file_dialog.setFileMode(QFileDialog.FileMode.ExistingFiles)
            file_dialog.setNameFilter("whl Files (*.whl)")
            if file_dialog.exec():
                selected_files = file_dialog.selectedFiles()
                virtualenv_path = self.virtualenv_folder_edit.text()
                if not virtualenv_path:
                    QMessageBox.warning(self, "警告", "请选择虚拟环境文件夹")
                    return

                activate_command = (
                    f"{virtualenv_path}/Scripts/activate"
                    if sys.platform.startswith('win')
                    else f"source {virtualenv_path}/bin/activate"
                )
                for file_path in selected_files:
                    install_command = f"{activate_command} && pip install {file_path}"
                    # 使用 Popen 执行命令，并捕获标准错误输出
                    process = subprocess.Popen(install_command, shell=True, stdout=subprocess.PIPE,
                                               stderr=subprocess.PIPE)
                    stdout, stderr = process.communicate()
                    # 如果发生错误，则显示错误消息
                    if process.returncode != 0:
                        QMessageBox.critical(self, "错误", f"安装本地whl文件时出错: {stderr.decode()}")
                        return
                    QMessageBox.information(self, "成功", "成功安装本地whl文件")
                self.refresh_dependencies_list()
        except Exception as e:
            QMessageBox.critical(self, "错误", f"安装本地whl文件时出错: {str(e)}")

    def run_python_file(self):
        try:
            virtualenv_path = self.virtualenv_folder_edit.text()
            if not virtualenv_path:
                QMessageBox.warning(self, "警告", "请选择虚拟环境文件夹")
                return

            # 获取 Python 文件路径
            python_file_path = self.main_window.py_file_lineEdit.text()
            if not python_file_path:
                QMessageBox.warning(self, "警告", "Python文件路径为空")
                return

            activate_command = (
                f"{virtualenv_path}/Scripts/activate"
                if sys.platform.startswith('win')
                else f"source {virtualenv_path}/bin/activate"
            )
            run_command = f"{activate_command} && python {python_file_path}"

            # 使用 subprocess.Popen() 执行命令，并捕获标准错误输出
            process = subprocess.Popen(run_command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            stdout, stderr = process.communicate()

            # 检查是否有错误输出，如果有，则显示错误信息
            if stderr:
                error_message = stderr.decode('utf-8')
                QMessageBox.critical(self, "错误", f"运行Python文件时出错: {error_message}")
        except Exception as e:
            QMessageBox.critical(self, "错误", f"运行Python文件时出错: {str(e)}")

    def toggle_top(self, checked):
        if checked:
            self.setWindowFlag(Qt.WindowType.WindowStaysOnTopHint)
        else:
            self.setWindowFlag(Qt.WindowType.WindowStaysOnTopHint, False)
        self.show()

    def select_virtualenv_folder(self):
        # 选择虚拟环境文件夹的代码
        try:
            folder_path = QFileDialog.getExistingDirectory(self, "选择虚拟环境文件夹", "")
            if folder_path:
                self.virtualenv_folder_edit.setText(folder_path)
                self.refresh_dependencies_list()
        except Exception as e:
            QMessageBox.critical(self, "错误", f"选择虚拟环境文件夹时出错: {str(e)}")

    def refresh_dependencies_list(self):
        # 获取依赖库按钮事件和页面的列表
        try:
            virtualenv_path = self.virtualenv_folder_edit.text()
            if not virtualenv_path:
                QMessageBox.warning(self, "警告", "请选择虚拟环境文件夹")
                return

            # 构建 pip list 命令
            pip_list_command = [f"{virtualenv_path}/Scripts/pip", "list"]
            # 使用 Popen 执行命令，并捕获标准输出和标准错误输出
            process = subprocess.Popen(pip_list_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            stdout, stderr = process.communicate()

            # 如果发生错误，则显示错误消息
            if process.returncode != 0:
                QMessageBox.critical(self, "错误", f"获取依赖库失败，错误信息: {stderr}")
                return

            dependencies = stdout.splitlines()

            # 创建一个标准项模型
            model = QStandardItemModel()
            # 设置列标签
            model.setHorizontalHeaderLabels(["依赖库", "版本号"])

            for dependency in dependencies:
                dependency_info = dependency.split()
                dependency_name = dependency_info[0]
                dependency_version = dependency_info[1] if len(dependency_info) > 1 else "Unknown"

                # 添加依赖库名称和版本号到模型中
                item_name = QStandardItem(dependency_name)
                item_version = QStandardItem(dependency_version)

                # 将项添加到模型中
                model.appendRow([item_name, item_version])

            # 将模型设置到表视图中
            self.dependencies_list.setModel(model)

            # 设置水平表头和垂直表头的调整模式
            header = self.dependencies_list.horizontalHeader()
            header.setStretchLastSection(True)
            # 设置列宽度
            self.dependencies_list.setColumnWidth(0, 250)

        except Exception as e:
            QMessageBox.critical(self, "错误", f"获取依赖库列表时出错: {str(e)}")

    def add_dependency(self):
        # 添加依赖库
        try:
            dependency_list = [
                "numpy", "pandas", "pygame", "matplotlib", "scipy", "scikit-learn", "tensorflow", "keras", "keyboard",
                "torch", "opencv-python", "seaborn", "requests", "beautifulsoup4", "flask", "django", "sqlalchemy",
                "pytest", "pytest-cov", "pytest-html", "pytest-xdist", "selenium", "pyqt5", "pyqt6", "pyside6",
                "pyqt5-tools",
                "pyqt6-tools", "wxpython", "tkinter", "pyyaml", "pyqtgraph", "pillow", "pyinstaller", "cx-freeze",
                "pylint", "flake8", "black", "mypy", "pytorch-lightning", "fastapi", "uvicorn", "starlette",
                "sqlalchemy", "asyncpg", "aioredis", "aiosqlite", "django-rest-framework", "marshmallow",
                "mongoengine", "redis", "celery", "pytest-asyncio", "httpx", "aiohttp", "pydantic", "fastapi",
                "jinja2", "uvicorn", "starlette", "dash", "plotly", "bokeh", "streamlit", "pytz", "arrow", "pendulum",
                "dateutil", "python-dateutil", "flask-restful", "pyjwt", "itsdangerous", "bcrypt", "passlib",
                "cryptography", "paramiko", "fabric", "pexpect", "awscli", "boto3", "gspread", "openpyxl", "xlrd",
                "xlwt", "pyodbc", "pymysql", "mysql-connector-python", "psycopg2", "python-ldap", "watchdog",
                "pyinotify", "click", "fire", "docopt", "typer", "clint", "prompt-toolkit", "tabulate", "rich",
                "colorama", "termcolor", "nuitka"
            ]
            # 创建带有自动补全功能的 QLineEdit
            completer = QCompleter(dependency_list, self)
            dependency_input = QLineEdit(self)
            dependency_input.setPlaceholderText("指定版本例如：nuitka==2.0.1")
            dependency_input.setCompleter(completer)

            # 创建对话框
            dialog = QDialog(self)
            dialog.setWindowTitle("添加依赖库")

            # 添加垂直布局
            layout = QVBoxLayout(dialog)

            # 添加标签
            label = QLabel("输入要添加的依赖库名称：", dialog)
            layout.addWidget(label)

            # 添加编辑框到垂直布局
            layout.addWidget(dependency_input)

            # 创建按钮盒
            button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
            button_box.accepted.connect(dialog.accept)
            button_box.rejected.connect(dialog.reject)

            # 将按钮盒添加到垂直布局
            layout.addWidget(button_box)

            # 执行对话框
            if dialog.exec() == QDialog.DialogCode.Accepted:
                dependency_name = dependency_input.text().strip()
                if dependency_name:
                    virtualenv_path = self.virtualenv_folder_edit.text()
                    if not virtualenv_path:
                        QMessageBox.warning(self, "警告", "请选择虚拟环境文件夹")
                        return

                    activate_command = f"{virtualenv_path}/Scripts/activate" if sys.platform.startswith(
                        'win') else f"source {virtualenv_path}/bin/activate"

                    if self.use_mirror_checkbox.isChecked():
                        mirror_url = self.mirror_edit.text()
                        install_command = f"{activate_command} && {virtualenv_path}/Scripts/pip install -i {mirror_url} {dependency_name}"
                    else:
                        install_command = f"{activate_command} && {virtualenv_path}/Scripts/pip install {dependency_name}"

                    # 使用 Popen 执行激活虚拟环境的命令
                    subprocess.Popen(activate_command, shell=True).wait()

                    # 使用 Popen 执行安装依赖库的命令
                    subprocess.Popen(install_command, shell=True).wait()

                    QMessageBox.information(self, "成功", f"成功添加依赖库: {dependency_name}")
                    self.refresh_dependencies_list()
        except Exception as e:
            QMessageBox.critical(self, "错误", f"添加依赖库时出错: {str(e)}")

    def remove_dependency(self):
        # 删除依赖库
        try:
            selected_index = self.dependencies_list.selectedIndexes()
            if not selected_index:
                QMessageBox.warning(self, "警告", "请选择要删除的依赖库")
                return

            selected_row = selected_index[0].row()
            model = self.dependencies_list.model()
            dependency_name = model.item(selected_row).text().strip()
            self.deleted_dependencies.append(dependency_name)

            virtualenv_path = self.virtualenv_folder_edit.text()
            if not virtualenv_path:
                QMessageBox.warning(self, "警告", "请选择虚拟环境文件夹")
                return

            activate_command = f"{virtualenv_path}/Scripts/activate" if sys.platform.startswith(
                'win') else f"source {virtualenv_path}/bin/activate"
            activate_process = subprocess.Popen(activate_command, shell=True, stdout=subprocess.PIPE,
                                                stderr=subprocess.PIPE)
            activate_process.communicate()  # 等待命令执行完毕

            uninstall_command = [f"{virtualenv_path}/Scripts/pip", "uninstall", dependency_name, "-y"]
            uninstall_process = subprocess.Popen(uninstall_command, shell=True, stdout=subprocess.PIPE,
                                                 stderr=subprocess.PIPE)
            uninstall_process.communicate()  # 等待命令执行完毕

            self.refresh_dependencies_list()
            QMessageBox.information(self, "成功", f"成功删除依赖库: {dependency_name}")
        except subprocess.CalledProcessError as e:
            QMessageBox.critical(self, "错误", f"删除依赖库失败，错误信息: {e.stderr}")
        except Exception as e:
            QMessageBox.critical(self, "错误", f"删除依赖库时出错: {str(e)}")

    def undo_remove_dependency(self):
        # 返回按钮事件
        try:
            # 获取最后一个被删除的依赖库名称
            if self.deleted_dependencies:
                dependency_name = self.deleted_dependencies.pop()
                # 重新安装依赖库
                virtualenv_path = self.virtualenv_folder_edit.text()
                if not virtualenv_path:
                    QMessageBox.warning(self, "警告", "请选择虚拟环境文件夹")
                    return

                activate_command = f"{virtualenv_path}/Scripts/activate" if sys.platform.startswith(
                    'win') else f"source {virtualenv_path}/bin/activate"

                if self.use_mirror_checkbox.isChecked():
                    mirror_url = self.mirror_edit.text()
                    install_command = f"{activate_command} && {virtualenv_path}/Scripts/pip install -i {mirror_url} {dependency_name}"
                else:
                    install_command = f"{activate_command} && {virtualenv_path}/Scripts/pip install {dependency_name}"

                activate_process = subprocess.Popen(activate_command, shell=True, stdout=subprocess.PIPE,
                                                    stderr=subprocess.PIPE)
                activate_process.communicate()  # 等待命令执行完毕

                install_process = subprocess.Popen(install_command, shell=True, stdout=subprocess.PIPE,
                                                   stderr=subprocess.PIPE)
                install_process.communicate()  # 等待命令执行完毕

                QMessageBox.information(self, "成功", f"成功撤销删除依赖库: {dependency_name}")
                self.refresh_dependencies_list()
            else:
                QMessageBox.warning(self, "警告", "没有可撤销的删除操作")
        except Exception as e:
            QMessageBox.critical(self, "错误", f"撤销删除依赖库时出错: {str(e)}")

    def show_dependency_files(self):
        try:
            # 初始化为根目录
            virtualenv_path = self.virtualenv_folder_edit.text()
            if not virtualenv_path:
                QMessageBox.warning(self, "警告", "请选择虚拟环境文件夹")
                return
            self.current_directory = os.path.join(virtualenv_path, 'Lib', 'site-packages')
            items = []
            files_and_folders = os.listdir(self.current_directory)
            for item in files_and_folders:
                item_path = os.path.join(self.current_directory, item)
                if os.path.isfile(item_path):
                    size = os.path.getsize(item_path)
                    # 将文件大小转换为 KB
                    size_kb = size / 1024
                    items.append((item, size_kb, "File"))
                elif os.path.isdir(item_path):
                    items.append((item, 0, "Folder"))

            # 创建一个新的对话框来显示文件和文件夹列表
            dialog = QDialog(self)
            dialog.setWindowTitle("依赖库文件和文件夹列表")
            dialog.resize(800, 600)
            layout = QVBoxLayout(dialog)
            list_widget = QTableWidget()
            list_widget.setSelectionBehavior(QAbstractItemView.SelectionBehavior.SelectRows)
            list_widget.setRowCount(len(items))
            list_widget.setColumnCount(2)
            list_widget.setHorizontalHeaderLabels(["名称", "大小(KB)"])
            list_widget.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)

            for row, (item, size_kb, item_type) in enumerate(items):
                item_name = QTableWidgetItem(item)
                item_size = QTableWidgetItem(f"{size_kb:.2f} KB" if item_type == "File" else "文件夹")
                list_widget.setItem(row, 0, item_name)
                list_widget.setItem(row, 1, item_size)

            # 设置文件大小列为可排序
            list_widget.setSortingEnabled(True)
            list_widget.sortItems(1, Qt.SortOrder.AscendingOrder)
            layout.addWidget(list_widget)

            # 创建前进和后退按钮
            forward_button = QPushButton("前进")
            backward_button = QPushButton("后退")
            run_button = QPushButton("运行")
            delete_button = QPushButton("删除")
            undo_button = QPushButton("撤销")

            # 创建红色、绿色和清除颜色按钮
            red_button_color = QColor("red").lighter(150)
            green_button_color = QColor("green").lighter(150)
            white_button_color = QColor("white").lighter(150)

            # 设置按钮的背景颜色
            red_button = QPushButton("红色")
            red_button.setStyleSheet(f"background-color: {red_button_color.name()};")
            green_button = QPushButton("绿色")
            green_button.setStyleSheet(f"background-color: {green_button_color.name()};")
            clear_color_button = QPushButton("清除颜色")
            clear_color_button.setStyleSheet(f"background-color: {white_button_color.name()};")

            # 定义按钮的点击事件
            forward_button.clicked.connect(lambda: self.enter_subdirectory(dialog, list_widget))
            backward_button.clicked.connect(lambda: self.return_to_parent(list_widget))
            run_button.clicked.connect(self.run_python_file)
            delete_button.clicked.connect(lambda: self.delete_files(list_widget))
            undo_button.clicked.connect(lambda: self.undo_delete(list_widget))
            red_button.clicked.connect(lambda: self.set_row_color(list_widget, QColor("red")))
            green_button.clicked.connect(lambda: self.set_row_color(list_widget, QColor("green")))
            clear_color_button.clicked.connect(lambda: self.clear_row_color(list_widget))

            # 将按钮添加到布局中
            button_layout = QHBoxLayout()
            button_layout.addWidget(backward_button)
            button_layout.addWidget(forward_button)
            button_layout.addWidget(run_button)
            button_layout.addWidget(delete_button)
            button_layout.addWidget(undo_button)
            layout.addLayout(button_layout)

            color_button_layout = QHBoxLayout()
            color_button_layout.addWidget(red_button)
            color_button_layout.addWidget(green_button)
            color_button_layout.addWidget(clear_color_button)
            layout.addLayout(color_button_layout)

            dialog.setLayout(layout)
            dialog.exec()

        except Exception as e:
            QMessageBox.critical(self, "错误", f"显示依赖库文件和文件夹时出错: {str(e)}")

    def set_row_color(self, table_widget, color):
        selected_rows = table_widget.selectionModel().selectedRows()
        for row in selected_rows:
            for column in range(table_widget.columnCount()):
                item = table_widget.item(row.row(), column)
                item.setBackground(color)

    def clear_row_color(self, table_widget):
        for item in table_widget.selectedItems():
            item.setBackground(QColor("white"))

    def refresh_dependency_files_list(self, list_widget):
        # 刷新列表
        try:
            items = []
            files_and_folders = os.listdir(self.current_directory)
            for item in files_and_folders:
                item_path = os.path.join(self.current_directory, item)
                if os.path.isfile(item_path):
                    size = os.path.getsize(item_path)
                    # 将文件大小转换为 KB
                    size_kb = size / 1024
                    items.append((item, size_kb, "File"))
                elif os.path.isdir(item_path):
                    items.append((item, 0, "Folder"))

            # 清空列表视图并添加新的文件和文件夹列表
            list_widget.clear()
            list_widget.setRowCount(len(items))
            list_widget.setColumnCount(2)
            list_widget.setHorizontalHeaderLabels(["名称", "大小(KB)"])

            for row, (item, size_kb, item_type) in enumerate(items):
                item_name = QTableWidgetItem(item)
                item_size = QTableWidgetItem(f"{size_kb:.2f} KB" if item_type == "File" else "文件夹")
                list_widget.setItem(row, 0, item_name)
                list_widget.setItem(row, 1, item_size)

        except Exception as e:
            QMessageBox.critical(self, "错误", f"刷新依赖库文件和文件夹列表时出错: {str(e)}")

    def delete_files(self, list_widget):
        try:
            # 获取要删除的文件信息
            selected_rows = list_widget.selectionModel().selectedRows()
            if not selected_rows:
                QMessageBox.warning(self, "警告", "请选择要删除的文件")
                return

            files_to_delete = []
            for selected_row in selected_rows:
                item_name = list_widget.item(selected_row.row(), 0).text()
                item_path = os.path.join(self.current_directory, item_name)
                files_to_delete.append((item_name, item_path))

            # 检查并创建备份文件夹
            if not os.path.exists(self.backup_folder):
                os.makedirs(self.backup_folder)

            # 备份文件并记录路径信息
            for file_name, file_path in files_to_delete:
                new_file_path = os.path.join(self.backup_folder, file_name)
                shutil.move(file_path, new_file_path)
                self.record_deleted_file(file_name, file_path)

            # 刷新列表
            QMessageBox.information(self, "成功", "文件已成功移动到备份文件夹")
            self.refresh_dependency_files_list(list_widget)
        except Exception as e:
            QMessageBox.critical(self, "错误", f"删除文件时出错: {str(e)}")

    def undo_delete(self, list_widget):
        try:
            # 读取配置文件中的路径信息
            with open(self.config_file, 'r') as f:
                deleted_files = json.load(f)

            if not deleted_files:
                QMessageBox.warning(self, "警告", "没有可撤销的删除操作")
                return

            # 选择要撤销删除的文件
            selected_file, ok = QInputDialog.getItem(self, "选择要撤销的文件", "选择要撤销的文件:",
                                                     deleted_files.keys(), 0, False)
            if not ok:
                return

            # 恢复文件到原始位置
            original_path = deleted_files[selected_file]
            shutil.move(os.path.join(self.backup_folder, selected_file), original_path)
            self.refresh_dependency_files_list(list_widget)

            # 删除配置文件中的相应条目
            del deleted_files[selected_file]
            with open(self.config_file, 'w') as f:
                json.dump(deleted_files, f)

            QMessageBox.information(self, "成功", f"成功撤销删除操作：{selected_file}")
        except Exception as e:
            QMessageBox.critical(self, "错误", f"撤销删除操作时出错: {str(e)}")

    def record_deleted_file(self, file_name, file_path):
        try:
            # 读取现有的已删除文件记录
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r') as f:
                    deleted_files = json.load(f)
            else:
                deleted_files = {}

            # 添加新的已删除文件记录
            deleted_files[file_name] = file_path

            # 更新配置文件
            with open(self.config_file, 'w') as f:
                json.dump(deleted_files, f)
        except Exception as e:
            QMessageBox.critical(self, "错误", f"记录已删除文件时出错: {str(e)}")

    def enter_subdirectory(self, dialog, list_widget):
        try:
            selected_row = list_widget.currentRow()
            item_name = list_widget.item(selected_row, 0).text()
            item_path = os.path.join(self.current_directory, item_name)

            if os.path.isdir(item_path):
                # 更新当前目录路径
                self.current_directory = item_path

                # 获取下一级目录的文件和文件夹列表
                sub_items = []
                files_and_folders = os.listdir(item_path)
                for sub_item in files_and_folders:
                    sub_item_path = os.path.join(item_path, sub_item)
                    if os.path.isfile(sub_item_path):
                        size = os.path.getsize(sub_item_path)
                        # 将文件大小转换为 KB
                        size_kb = size / 1024
                        sub_items.append((sub_item, size_kb, "File"))
                    elif os.path.isdir(sub_item_path):
                        sub_items.append((sub_item, 0, "Folder"))

                # 清空列表视图并添加新的文件和文件夹列表
                list_widget.clear()
                list_widget.setRowCount(len(sub_items))
                list_widget.setColumnCount(2)
                list_widget.setHorizontalHeaderLabels(["名称", "大小(KB)"])

                for row, (sub_item_name, size_kb, item_type) in enumerate(sub_items):
                    sub_item_name_item = QTableWidgetItem(sub_item_name)
                    size_item = QTableWidgetItem(f"{size_kb:.2f} KB" if item_type == "File" else "文件夹")
                    list_widget.setItem(row, 0, sub_item_name_item)
                    list_widget.setItem(row, 1, size_item)

        except Exception as e:
            QMessageBox.critical(self, "错误", f"打开文件夹时出错: {str(e)}")

    def return_to_parent(self, list_widget):
        try:
            # 获取上一级目录
            parent_directory = os.path.dirname(self.current_directory)
            if parent_directory:
                self.current_directory = parent_directory

                # 获取上一级目录的文件和文件夹列表
                parent_items = []
                files_and_folders = os.listdir(parent_directory)
                for item in files_and_folders:
                    item_path = os.path.join(parent_directory, item)
                    if os.path.isfile(item_path):
                        size = os.path.getsize(item_path)
                        # 将文件大小转换为 KB
                        size_kb = size / 1024
                        parent_items.append((item, size_kb, "File"))
                    elif os.path.isdir(item_path):
                        parent_items.append((item, 0, "Folder"))

                # 清空列表视图并添加新的文件和文件夹列表
                list_widget.clear()
                list_widget.setRowCount(len(parent_items))
                list_widget.setColumnCount(2)
                list_widget.setHorizontalHeaderLabels(["名称", "大小(KB)"])

                for row, (item_name, size_kb, item_type) in enumerate(parent_items):
                    item_name_item = QTableWidgetItem(item_name)
                    size_item = QTableWidgetItem(f"{size_kb:.2f} KB" if item_type == "File" else "文件夹")
                    list_widget.setItem(row, 0, item_name_item)
                    list_widget.setItem(row, 1, size_item)
        except Exception as e:
            QMessageBox.critical(self, "错误", f"返回上一级目录时出错: {str(e)}")
